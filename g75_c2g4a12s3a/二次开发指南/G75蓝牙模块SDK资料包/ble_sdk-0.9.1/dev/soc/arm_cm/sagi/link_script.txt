MEMORY
{
  RAM (rwx) : ORIGIN = 0x400000, LENGTH = 0x20000
  FLASH (rx) : ORIGIN = 0x805000, LENGTH = 0x40000
}

SECTIONS
{
    __data_lma__ = ORIGIN(FLASH);

	.data :
	{
		. = ALIGN(4);
		__data_start__ = .;
		KEEP(*(.vectors))
		*(.data*)
		*(.xip_banned)
		__data_end__ = ALIGN(4);
	}>RAM AT>FLASH

	.text :
	{
	
		KEEP(*(.init))
		KEEP(*(.fini))

		*crtbegin.o(.ctors)
		*crtbegin?.o(.ctors)
		*(EXCLUDE_FILE(*crtend?.o *crtend.o) .ctors)
		*(SORT(.ctors.*))
		*(.ctors)


		*crtbegin.o(.dtors)
		*crtbegin?.o(.dtors)
		*(EXCLUDE_FILE(*crtend?.o *crtend.o) .dtors)
		*(SORT(.dtors.*))
		*(.dtors)

		*(.eh_frame*)
		*(.text* .rodata*)
	}>FLASH

	.ARM.exidx :
	{
		*(.ARM.exidx* .gnu.linkonce.armexidx.*)
	} > FLASH

	.bss (NOLOAD):
	{
		__bss_start__ = .;
		*(.bss*)
		*(COMMON)
		*(SECTION_RTT)
		*(DMAC1)
		*(DMARAM)
		__bss_end__ = ALIGN(4);
	}>RAM

    .heap (NOLOAD):
    {
        __end__ = .;
        PROVIDE(end = .);
        *(.heap*)
    } > RAM

    .reset_retain (COPY) :
	{
		*(.reset_retain)
	}

	/* .stack_dummy section doesn't contains any symbols. It is only
	 * used for linker to calculate size of stack sections, and assign
	 * values to stack symbols later */
	.stack_dummy (COPY):
	{
		*(.stack*)
	} > RAM

	/* Set stack top to end of RAM, and stack limit move down by
	 * size of stack_dummy section */
	__StackTop = ORIGIN(RAM) + LENGTH(RAM);
	__StackLimit = __StackTop - SIZEOF(.stack_dummy);
	PROVIDE(__stack = __StackTop);
	
	/* Check if data + heap + stack exceeds RAM limit */
	ASSERT(__StackLimit >= __HeapLimit, "region RAM overflowed with stack")
	
}
